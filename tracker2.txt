$ rails new tracker
$ cd tracker
$ touch tracker2.txt
$ open tracker2.txt

$ rails g scaffold CheckIn mile_run:integer push_ups:integer sit_ups:integer weight:integer

$ rails db:migrate


- in Gemfile:
gem 'twitter-bootstrap-rails', :git => 'git://github.com/seyhunak/twitter-bootstrap-rails.git'

$ bundle install
$ rails g bootstrap:install static

~*~*~
NOTE: We've installed this first so it's available, and so that later gems can interact with it.
~*~*~

- again in Gemfile:
gem 'simple_form'

$ bundle install
$ rails g simple_form:install --bootstrap

*
*
*
*
*
****** Create a "welcome" landing page

$ rails g controller Welcome index

- in config/routes.rb set welcome as root - 
  ##replace get 'welcome/index' with:
  root 'welcome#index'

****** Set up Devise and cancancan

- in gemfile add, then save:

gem 'devise'
gem 'cancancan'

~*~*~
NOTE: devise allows secure users/login. cancancan allows you to have different levels of user with different levels of authorization.
~*~*~

$ bundle install

****** Add Devise authentication

$ rails g devise:install

****** Set up development mailers

- in config/environments/development.rb change line 30 from false to true
config.action_mailer.raise_delivery_errors = true

- still in config/environments/development.rb under line 7 paste the following action mailer code:
#####
  config.action_mailer.default_url_options = { :host => 'localhost:3000' }
  #These settings are for the sending out email for active admin and consequently the   devise mailer
  ActionMailer::Base.delivery_method = :smtp
  ActionMailer::Base.perform_deliveries = true
  ActionMailer::Base.raise_delivery_errors = true
  ActionMailer::Base.smtp_settings = 
  {
    :address            => 'smtp.gmail.com',
    :port               => 587,
    :domain             => 'ENV[“GMAIL_DOMAIN”]', #you can also use google.com
    :authentication     => :plain,
    :user_name          => 'ENV[“GMAIL_USERNAME”]',
    :password           => 'ENV[“GMAIL_PASSWORD”]'
  }
#####

~*~*~
NOTE: This sets up our mailer, except for, you know, GMAIL DOMAIN, GMAIL USERNAME, and GMAIL PASSWORD. We're gonna want those in a secure file.
~*~*~

- in gemfile add

gem 'figaro'

$ bundle install
$ bundle exec figaro install

~*~*~
-- Now we have an application.yml file for confidential stuff
~*~*~

- in config/application.yml tell it your gmail info at the bottom
GMAIL_DOMAIN: gmail.com
GMAIL_USERNAME: YourUsername
GMAIL_PASSWORD: y0urP@ssword

#######
########
****** Add user & username

$ rails g devise:views
$ rails g devise User
$ rails db:migrate


$ rails g migration AddUsernameToUsers username:string age:string 
$ rails db:migrate

- in app/views/devise/registrations/new.html.erb AND app/views/devise/registrations/edit.html.erb replace current username/email fields with
#####
    <%= f.input :username, required: true, autofocus: true %>
    <%= f.input :email, required: true %>
#####

~*~*~
NOTE: We just added a property to User through Devise. Just like when we add a property to a regular model, we need to add it to our params. Unlike a regular model, Devise doesn't have its own controller. We'll take care of that in our application controller. (Most of this we'd have to do even if we'd added username to begin with.)
~*~*~

- in app/controllers/application_controller.rb replace all code with
#####
class ApplicationController < ActionController::Base
  before_action :configure_permitted_parameters, if: :devise_controller?
  protect_from_forgery with: :exception

  private
  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:username])
    devise_parameter_sanitizer.permit(:account_update, keys: [:username])
  end
  
end
#####

#####
-in gemfile add

gem 'gravatarify', '~> 3.0.0'

$ bundle install

#####
- in app/models/user.rb add
  has_many :check_ins

-in app/models/check_in.rb add
  belongs_to :user

#####################################
######## MONDAY NOTES ###############
#####################################

make some changes to the Welcome page

- in views/welcome/index change code to 

<h1>Welcome to Your Fitness Tracker.</h1>
<p>User our tool to keep track of your progress on key exercises.</p>

######

add a simple navigation (pulled from SmileBook)

****** Create header (navbar)

- in app/views/layouts/application.html.erb add just at top of body (above <%= yield %>)

  <%= render "layouts/header" %>

- in app/views/layouts create a new partial called _header.html.erb

~*~*~
NOTE: Partials need to start with an underscore & lowercase letter
~*~*~

- in app/views/layouts/_header.html.erb paste navbar from bootstrap

- still in app/views/layouts/_header.html.erb replace first line with
  <nav class="navbar navbar-default navbar-fixed-top">


~*~*~
NOTE: This makes it so the navbar stays at the top. But now the body is hidden behind the navbar, so
~*~*~

- in assets/stylesheets/application.css, add
#####
body {
  padding-top:70px;
}
#####

before setting up nav bar, configure some routes

- in config/routes add

  get '/progress' => 'check_ins#index', as: 'progress'

#####

~*~*~
We want a navbar-right that has a link to 'New Check In' and 'Progress'. IF the user is signed in, then we want a dropdown with the current user's name that links (again empty links) to Profile, Settings and Log Out (should be working links). ELSE, there should be a link to log in (again working).
~*~*~

- in app/views/layouts/_header.html.erb the result should look like this:
#####
<nav class="navbar navbar-default navbar-fixed-top">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <%= link_to "JB Fitness Tracker", root_url, :class => "navbar-brand" %>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">
      <li><%= link_to "New Check In", new_check_in_path %></li>
        <li><%= link_to "Progress", progress_path %></li>
      </ul>
      <ul class="nav navbar-nav navbar-right">
        <% if current_user %>
         <li class="dropdown">
           <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><%= gravatar_tag current_user.email, size: 20 %> <%=  current_user.username %> <span class="caret"></span></a>
          <ul class="dropdown-menu">
            <li><%= link_to "Profile", "#" %></li>
            <li><%= link_to "Settings", edit_user_registration_path %></li>
            
            <li role="separator" class="divider"></li>
            <li><%= link_to "Log Out", destroy_user_session_path, method: :delete %></li>
          </ul>
        </li>
        <% else %>
        <li><%= link_to "Log In", new_user_session_path %></li>
        <% end %>       
      </ul>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
#####

Require login before checking in or viewing progress

- in controllers/check_ins add

  before_action :authenticate_user!


###################
#### TASKS ########
###################
- Seed database
- install and configure chart gem




#############################
#############################

Questions:
- Do we want a different bootstap install (vs static)?


Remember To:
-include gravatar when developing views

